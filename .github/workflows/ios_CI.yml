# name: iOS App build
# on:
#   push:
#     branches:
#       - main


# jobs:
#   build_with_signing:
#     runs-on: macos-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3
#       - name: pod Install
#         run: pod install
#       - name: Install the Apple certificate and provisioning profile
#         env:
#           BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_PROD_CERTIFICATE }}
#           P12_PASSWORD: ${{ secrets.IOS_PROD_CERTIFICATE_PASSWORD }}
#           BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PRODUCTION }}
#           KEYCHAIN_PASSWORD: ${{ secrets.IOS_PROD_CERTIFICATE_PASSWORD }}
#         run: |
#           # create variables
#           CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#           PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#           KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

#           # import certificate and provisioning profile from secrets
#           echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
#           echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

#           # create temporary keychain
#           security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#           security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#           security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

#           # import certificate to keychain
#           security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#           security list-keychain -d user -s $KEYCHAIN_PATH

#           # apply provisioning profile
#           mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#           cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

#       - name: iOS app
#         run: xcodebuild -scheme "Actions Production" clean archive -archivePath "Actions" -configuration "Release Production"
#       - name: export ipa
#         env:
#           EXPORT_PLIST: ${{ secrets.IOS_EXPORT_PRODUCTION }}
#         run: | 
#           # create export options
#           EXPORT_PLIST_PATH =$RUNNER_TEMP/ExportOptions.plist
#           echo -n "$EXPORT_PLIST" | base64 --decode --output $EXPORT_PLIST_PATH
#           xcode build -exportArchive -archivePath $GITHUB_WORKSPACE/Actions.xcarchive -exportOptionsPlist $EXPORT_PLIST_PATH -exportPath RUNNER_TEMP/export

#       - name: Rename the file, remove the whitespaces
#         run: | 
#           echo Export directory contents:
#           ls Users/cobemacmini/ios-runner/_work/_temp/export/
#           mv "Users/cobemacmini/ios-runner/_work/_temp/export/ActionsProduction.ipa" "/Users/cobemacmini/ios-runner/_work/_temp/export/ActionsProduction.ipa"
#           ls /Users/cobemacmini/ios-runner/_work/_temp/export/

#       - name: Decode auth. api key file and save it
#         env:
#           API_KEY_BASE64: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
#         run: |
#           ls ~/private_keys
#           echo -n "$API_KEY_BASE64" | base64 --decode --outpud ~/private_keys/AuthKey_${{ secrets.APPSTORE_API_PRIVATE_KEY }}.p8
#           echo "After saving: "
#           ls ~/private_keys

#       - name: "Upload file to test flight using CLI"
#         run: |
#           echo "Starting upload..."
#           ls ~/private_keys
#           xcrun altool --validate-app -f Users/cobemacmini/ios-runner/_work/_temp/export/ActionsProduction.ipa -t ios --apiKey ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
#           xcrun altool --upload-app -f /Users/cobemacmini/ios-runner/_work/_temp/export/ActionsProduction.ipa -t ios --apiKey ${{ secrets.APPSTORE_API_PRIVATE_KEY }}





